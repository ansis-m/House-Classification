type: edu
files:
- name: solution.py
  visible: true
  text: |
    import os
    import requests
    import sys
    import pandas as pd

    if __name__ == '__main__':
        if not os.path.exists('../Data'):
            os.mkdir('../Data')

        # Download data if it is unavailable.
        if 'house_class.csv' not in os.listdir('../Data'):
            sys.stderr.write("[INFO] Dataset is loading.\n")
            url = "https://www.dropbox.com/s/7vjkrlggmvr5bc1/house_class.csv?dl=1"
            r = requests.get(url, allow_redirects=True)
            open('../Data/house_class.csv', 'wb').write(r.content)
            sys.stderr.write("[INFO] Loaded.\n")

        # write your code here
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |-
    import ast
    from hstest.stage_test import List
    from hstest import *
    import re

    correct_answer_onehot = 0.64
    correct_answer_ordinal = 0.86
    correct_answer_te = 0.75
    regex4float = "[+-]?([0-9]*[.])?[0-9]+"


    class CompareTest(StageTest):

        def generate(self) -> List[TestCase]:
            return [TestCase(time_limit=1000000)]

        def check(self, reply: str, attach):

            reply = reply.strip().replace(" ", "").lower()

            if len(reply) == 0:
                return CheckResult.wrong("No output was printed")

            if len(reply.split('\n')) != 3:
                return CheckResult.wrong('The number of lines is the output does not equal 3.\n'
                                         'Please follow the format specified in the Examples section.')

            answer_onehot = re.search(pattern=f"onehotencoder:{regex4float}", string=reply)

            if answer_onehot is None:
                raise WrongAnswer(
                    "Didn't find all or a part of the answer for the OneHotEncoder case.\n"
                    "Check whether the format is correct")
            user_f1_onehot = float(answer_onehot.group(0).split(':')[1])

            if user_f1_onehot > correct_answer_onehot + 0.01 * correct_answer_onehot or \
                    user_f1_onehot < correct_answer_onehot - 0.01 * correct_answer_onehot:
                return CheckResult.wrong(f'Seems like your answer for OneHotEncoder case is not correct.')

            answer_ordinal = re.search(pattern=f"ordinalencoder:{regex4float}", string=reply)

            if answer_ordinal is None:
                raise WrongAnswer(
                    "Didn't find all or a part of the answer for the OrdinalEncoder case.\n"
                    "Check whether the format is correct")
            user_f1_ordinal = float(answer_ordinal.group(0).split(':')[1])

            if user_f1_ordinal > correct_answer_ordinal + 0.01 * correct_answer_ordinal or \
                    user_f1_ordinal < correct_answer_ordinal - 0.01 * correct_answer_ordinal:
                return CheckResult.wrong(f'Seems like your answer for OrdinalEncoder case is not correct.')

            answer_te = re.search(pattern=f"targetencoder:{regex4float}", string=reply)

            if answer_te is None:
                raise WrongAnswer(
                    "Didn't find all or a part of the answer for the TargetEncoder case.\n"
                    "Check whether the format is correct")
            user_f1_te = float(answer_te.group(0).split(':')[1])

            if user_f1_te > correct_answer_te + 0.01 * correct_answer_te or \
                    user_f1_te < correct_answer_te - 0.01 * correct_answer_te:
                return CheckResult.wrong(f'Seems like your answer for TargetEncoder case is not correct.')

            return CheckResult.correct()


    if __name__ == '__main__':
        CompareTest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import CompareTest

    if __name__ == '__main__':    CompareTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/370/stages/2193/implement#comment
status: Unchecked
record: -1
